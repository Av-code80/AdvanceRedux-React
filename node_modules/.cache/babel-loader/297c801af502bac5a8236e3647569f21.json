{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit'; //16)toolkit\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //12) \n\ncreateSlice({\n  //17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',\n  //18)counter can be any name\n  initialState,\n  //: initialState,           //initial state equal to our object\n  reducers: {\n    //an object of all the reducers this slice needs\n    increment() {},\n\n    decrement\n  }\n});\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      //our state, just an object with a counter property\n      showCounter: state.showCounter //13)we're returning overall state object; overall state object\n\n    };\n  }\n\n  if (action.type === 'increase') {\n    //11)\n    return {\n      counter: state.counter + action.amount,\n      //reducer is dynamic, it extract an action payload\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      //13)change to oposit state => 14) counter.js\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store; //* when having pieces of state which aren't directly related, can do an authentification status\n//and the counter status, can create different slices potentially also in different files\n//to make our code maintainable","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","name","reducers","increment","decrement","counterReducer","state","action","type","amount","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAAiE;;AAGjE,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAA0D;;AAE1DJ,WAAW,CAAC;AAAC;AACXK,EAAAA,IAAI,EAAE,SADI;AACmC;AAC7CH,EAAAA,YAFU;AAEI;AACdI,EAAAA,QAAQ,EAAE;AAAiC;AACvCC,IAAAA,SAAS,GAAG,CAAE,CADR;;AAENC,IAAAA;AAFM;AAHA,CAAD,CAAX;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACvD,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAE3B,WAAO;AACCT,MAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAgB,CAD1B;AAC+B;AAC9BC,MAAAA,WAAW,EAAEM,KAAK,CAACN,WAFpB,CAEiC;;AAFjC,KAAP;AAIC;;AAED,MAAIO,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAAG;AAC/B,WAAO;AACLT,MAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAgBQ,MAAM,CAACE,MAD3B;AACmC;AACxCT,MAAAA,WAAW,EAAEM,KAAK,CAACN;AAFd,KAAP;AAID;;AAEH,MAAIO,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAE7B,WAAO;AACHT,MAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAe,CADrB;AAEHC,MAAAA,WAAW,EAAEM,KAAK,CAACN;AAFhB,KAAP;AAIH;;AAED,MAAIO,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLR,MAAAA,WAAW,EAAE,CAACM,KAAK,CAACN,WADf;AACiC;AACtCD,MAAAA,OAAO,EAAEO,KAAK,CAACP;AAFV,KAAP;AAID;;AAED,SAAOO,KAAP;AACH,CAhCL;;AAkCI,MAAMI,KAAK,GAAGf,WAAW,CAACU,cAAD,CAAzB;AAEA,eAAeK,KAAf,C,CAEA;AACA;AACA","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';  //16)toolkit\n\n\nconst initialState = { counter: 0, showCounter: true };   //12) \n\ncreateSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',                             //18)counter can be any name\n  initialState, //: initialState,           //initial state equal to our object\n  reducers: {                                //an object of all the reducers this slice needs\n      increment() {},\n      decrement\n  }\n}); \nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n       \n        return {\n                counter: state.counter + 1,   //our state, just an object with a counter property\n                showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n              };\n        }\n\n        if (action.type === 'increase') {  //11)\n            return {\n              counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n              showCounter: state.showCounter\n            };\n          }\n\n        if (action.type === 'decrement') {\n\n            return {\n                counter: state.counter -1,\n                showCounter: state.showCounter\n              };\n        }\n\n        if (action.type === 'toggle') {\n          return {\n            showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n            counter: state.counter\n          };\n        }      \n\n        return state;\n    };\n\n    const store = createStore(counterReducer);\n\n    export default store;\n\n    //* when having pieces of state which aren't directly related, can do an authentification status\n    //and the counter status, can create different slices potentially also in different files\n    //to make our code maintainable"]},"metadata":{},"sourceType":"module"}