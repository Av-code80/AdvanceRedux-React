{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit'; //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //12) \n//19)to use our slice we need to use return value of calling createSlice by const counterSlice\n\nconst counterSlice = createSlice({\n  //17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',\n  //18)counter can be any name\n  initialState,\n  //: initialState,           //initial state equal to our object\n  reducers: {\n    //an object of all the reducers this slice needs\n    increment(state) {\n      //every method receive latest state automatically\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //here need a payload, extra data\n      state.counter = state.counter + action.amount; //it's mutating state\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst store = configureStore({\n  //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions; //24)to hold all identifiers can use action, it's an object\n\nexport const authActions = authSlice.actions;\nexport default store; //* when having pieces of state which aren't directly related, can do an authentification status\n//and the counter status, can create different slices potentially also in different files\n//to make our code maintainable\n//**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n//     return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n//     return state;\n// };","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/store/index.js"],"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","store","reducer","auth","authSlice","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAAiE;AACjE;;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAA0D;AAC1D;;AACC,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAAC;AACjCM,EAAAA,IAAI,EAAE,SAD0B;AACa;AAC7CJ,EAAAA,YAFgC;AAElB;AACdK,EAAAA,QAAQ,EAAE;AAAiC;AACvCC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAAoB;AACjCA,MAAAA,KAAK,CAACN,OAAN;AACH,KAHK;;AAINO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANK;;AAONQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAiB;AAA0B;AAC/CH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC,CADqB,CAC2B;AACnD,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAZK;AAHsB,CAAD,CAAhC;AAmBG,MAAMW,KAAK,GAAGd,cAAc,CAAC;AAAE;AAC7Be,EAAAA,OAAO,EAAE;AAAEb,IAAAA,OAAO,EAAEE,YAAY,CAACW,OAAxB;AACTC,IAAAA,IAAI,EAAEC,SAAS,CAACF;AADP;AADkB,CAAD,CAA5B;AAKA,OAAO,MAAMG,cAAc,GAAGd,YAAY,CAACe,OAApC,C,CAAwD;;AAE/D,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACE,OAA9B;AACP,eAAeL,KAAf,C,CAMA;AACA;AACA;AAEF;AAEF;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';  //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n\nconst initialState = { counter: 0, showCounter: true };   //12) \n//19)to use our slice we need to use return value of calling createSlice by const counterSlice\n const counterSlice = createSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',                             //18)counter can be any name\n  initialState, //: initialState,           //initial state equal to our object\n  reducers: {                                //an object of all the reducers this slice needs\n      increment(state) {                   //every method receive latest state automatically\n          state.counter++;\n      },                      \n      decrement(state) {\n        state.counter--;\n      },\n      increase(state, action)  {                         //here need a payload, extra data\n          state.counter = state.counter + action.amount;  //it's mutating state\n      },                       \n      toggleCounter(state) {\n        state.showCounter = !state.showCounter;\n      },\n  },\n}); \n\n    const store = configureStore({ //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n      reducer: { counter: counterSlice.reducer, \n      auth: authSlice.reducer },\n    });\n\n    export const counterActions = counterSlice.actions;            //24)to hold all identifiers can use action, it's an object\n\n    export const authActions = authSlice.actions;\n    export default store;\n\n\n\n\n    \n    //* when having pieces of state which aren't directly related, can do an authentification status\n    //and the counter status, can create different slices potentially also in different files\n    //to make our code maintainable\n\n  //**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n       \n//     return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n\n//     if (action.type === 'decrement') {\n\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n\n//     return state;\n// };"]},"metadata":{},"sourceType":"module"}