{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit'; //16)toolkit\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //12) \n//19)to use our slice we need to use return value of calling createSlice\n\nconst counterSlice = createSlice({\n  //17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',\n  //18)counter can be any name\n  initialState,\n  //: initialState,           //initial state equal to our object\n  reducers: {\n    //an object of all the reducers this slice needs\n    increment(state) {\n      //every method receive latest state automatically\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //here need a payload, extra data\n      state.counter = state.counter + action.amount; //it's mutating state\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      //our state, just an object with a counter property\n      showCounter: state.showCounter //13)we're returning overall state object; overall state object\n\n    };\n  }\n\n  if (action.type === 'increase') {\n    //11)\n    return {\n      counter: state.counter + action.amount,\n      //reducer is dynamic, it extract an action payload\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      //13)change to oposit state => 14) counter.js\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store; //* when having pieces of state which aren't directly related, can do an authentification status\n//and the counter status, can create different slices potentially also in different files\n//to make our code maintainable","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAAiE;;AAGjE,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAA0D;AAC1D;;AACC,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAAC;AACjCM,EAAAA,IAAI,EAAE,SAD0B;AACa;AAC7CJ,EAAAA,YAFgC;AAElB;AACdK,EAAAA,QAAQ,EAAE;AAAiC;AACvCC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAAoB;AACjCA,MAAAA,KAAK,CAACN,OAAN;AACH,KAHK;;AAINO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANK;;AAONQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAiB;AAA0B;AAC/CH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC,CADqB,CAC2B;AACnD,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAZK;AAHsB,CAAD,CAAhC;;AAkBD,MAAMW,cAAc,GAAG,CAACN,KAAK,GAAGP,YAAT,EAAuBU,MAAvB,KAAkC;AACvD,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAE3B,WAAO;AACCb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CAD1B;AAC+B;AAC9BC,MAAAA,WAAW,EAAEK,KAAK,CAACL,WAFpB,CAEiC;;AAFjC,KAAP;AAIC;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAAG;AAC/B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAD3B;AACmC;AACxCT,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFd,KAAP;AAID;;AAEH,MAAIQ,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAE7B,WAAO;AACHb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAe,CADrB;AAEHC,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFhB,KAAP;AAIH;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLZ,MAAAA,WAAW,EAAE,CAACK,KAAK,CAACL,WADf;AACiC;AACtCD,MAAAA,OAAO,EAAEM,KAAK,CAACN;AAFV,KAAP;AAID;;AAED,SAAOM,KAAP;AACH,CAhCL;;AAkCI,MAAMQ,KAAK,GAAGlB,WAAW,CAACgB,cAAD,CAAzB;AAEA,eAAeE,KAAf,C,CAEA;AACA;AACA","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';  //16)toolkit\n\n\nconst initialState = { counter: 0, showCounter: true };   //12) \n//19)to use our slice we need to use return value of calling createSlice\n const counterSlice = createSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',                             //18)counter can be any name\n  initialState, //: initialState,           //initial state equal to our object\n  reducers: {                                //an object of all the reducers this slice needs\n      increment(state) {                   //every method receive latest state automatically\n          state.counter++;\n      },                      \n      decrement(state) {\n        state.counter--;\n      },\n      increase(state, action)  {                         //here need a payload, extra data\n          state.counter = state.counter + action.amount;  //it's mutating state\n      },                       \n      toggleCounter(state) {\n        state.showCounter = !state.showCounter;\n      },\n  },\n}); \nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n       \n        return {\n                counter: state.counter + 1,   //our state, just an object with a counter property\n                showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n              };\n        }\n\n        if (action.type === 'increase') {  //11)\n            return {\n              counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n              showCounter: state.showCounter\n            };\n          }\n\n        if (action.type === 'decrement') {\n\n            return {\n                counter: state.counter -1,\n                showCounter: state.showCounter\n              };\n        }\n\n        if (action.type === 'toggle') {\n          return {\n            showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n            counter: state.counter\n          };\n        }      \n\n        return state;\n    };\n\n    const store = createStore(counterReducer);\n\n    export default store;\n\n    //* when having pieces of state which aren't directly related, can do an authentification status\n    //and the counter status, can create different slices potentially also in different files\n    //to make our code maintainable"]},"metadata":{},"sourceType":"module"}