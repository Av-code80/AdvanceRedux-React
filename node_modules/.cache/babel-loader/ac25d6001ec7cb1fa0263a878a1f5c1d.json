{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit'; //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n//100)remove createSlice\n//101)creating main store & mergin all sice reducers together\n\nimport counterReducer from './counter';\nimport authReducer from './auth'; //106) import\n//29)for ath state, must create a new brand slice by changing name initialCounterState\n// const initialCounterState  = { counter: 0, showCounter: true };   //12) \n// //19)to use our slice we need to use return value of calling createSlice by const counterSlice\n// const counterSlice = createSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n//   name: 'counter',                             //18)counter can be any name\n//   initialState: initialCounterState,    //: initialState,  //initial state equal to our object --30)initialCounterState\n//   reducers: {                                //an object of all the reducers this slice needs\n//       increment(state) {                   //every method receive latest state automatically\n//         state.counter++;\n//       },                      \n//       decrement(state) {\n//         state.counter--;\n//       },\n//       increase(state, action)  {                         //here need a payload, extra data\n//         state.counter = state.counter + action.payload;  //it's mutating state-- 27+)Paylod replaced instead of amount\n//       },                       \n//       toggleCounter(state) {\n//         state.showCounter = !state.showCounter;\n//       },\n//   },\n// }); \n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n// const authSlice = createSlice({         //31)then call createSlice to create another slice and it needs an object\n//   name: 'authentication',\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\nconst store = configureStore({\n  //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n  reducer: {\n    counter: counterReducer,\n    //104) counterReducer instead of counterSlice.reducer\n    // auth: authSlice.reducer                       //32)objet act as a map reducers\n    auth\n  }\n}); //=>25)with this go to component where need actions: Counter.js\n\nexport const counterActions = counterSlice.actions; //24)to hold all identifiers can use action, it's an object and export it, \n\nexport const authActions = authSlice.actions; //33***)expose it as Action, now can use it in differents components,\n\nexport default store; //34)=> to Counter.js\n//47)now wanna splitout slices in smaller code so create counter.js, so grap initialCounterState\n//* when having pieces of state which aren't directly related, can do an authentification status\n//and the counter status, can create different slices potentially also in different files\n//to make our code maintainable\n//**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n//*** store sate is changed now, so must fixe it in Counter.js => 34)\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n// return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n//     return state;\n// };","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/store/index.js"],"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth","counterActions","counterSlice","actions","authActions","authSlice"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B,C,CAAoD;AACpD;AACA;AAEA;;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,QAAxB,C,CAAsC;AAKtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,MAAMC,KAAK,GAAGH,cAAc,CAAC;AAAE;AAC7BI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEJ,cAAX;AAA4B;AACrC;AACEK,IAAAA;AAFO;AADkB,CAAD,CAA5B,C,CAMgD;;AAChD,OAAO,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAApC,C,CAA6C;;AACpD,OAAO,MAAMC,WAAW,GAAGC,SAAS,CAACF,OAA9B,C,CAA6C;;AACpD,eAAeN,KAAf,C,CAAoD;AAGpD;AAGA;AACA;AACA;AAEF;AAEA;AAQF;AACA;AACO;AACP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';  //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n//100)remove createSlice\n\n//101)creating main store & mergin all sice reducers together\nimport counterReducer from './counter';\nimport authReducer from './auth';     //106) import\n\n\n\n\n//29)for ath state, must create a new brand slice by changing name initialCounterState\n// const initialCounterState  = { counter: 0, showCounter: true };   //12) \n// //19)to use our slice we need to use return value of calling createSlice by const counterSlice\n// const counterSlice = createSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n//   name: 'counter',                             //18)counter can be any name\n//   initialState: initialCounterState,    //: initialState,  //initial state equal to our object --30)initialCounterState\n//   reducers: {                                //an object of all the reducers this slice needs\n//       increment(state) {                   //every method receive latest state automatically\n//         state.counter++;\n//       },                      \n//       decrement(state) {\n//         state.counter--;\n//       },\n//       increase(state, action)  {                         //here need a payload, extra data\n//         state.counter = state.counter + action.payload;  //it's mutating state-- 27+)Paylod replaced instead of amount\n//       },                       \n//       toggleCounter(state) {\n//         state.showCounter = !state.showCounter;\n//       },\n//   },\n// }); \n\n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n\n// const authSlice = createSlice({         //31)then call createSlice to create another slice and it needs an object\n//   name: 'authentication',\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\n    const store = configureStore({ //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n      reducer: { counter: counterReducer,  //104) counterReducer instead of counterSlice.reducer\n      // auth: authSlice.reducer                       //32)objet act as a map reducers\n        auth\n    },\n    });\n                                                    //=>25)with this go to component where need actions: Counter.js\n    export const counterActions = counterSlice.actions; //24)to hold all identifiers can use action, it's an object and export it, \n    export const authActions = authSlice.actions;       //33***)expose it as Action, now can use it in differents components,\n    export default store;                               //34)=> to Counter.js\n\n\n    //47)now wanna splitout slices in smaller code so create counter.js, so grap initialCounterState\n\n\n    //* when having pieces of state which aren't directly related, can do an authentification status\n    //and the counter status, can create different slices potentially also in different files\n    //to make our code maintainable\n\n  //**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n\n  //*** store sate is changed now, so must fixe it in Counter.js => 34)\n\n\n\n\n\n\n\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n       // return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n\n//     if (action.type === 'decrement') {\n\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n\n//     return state;\n// };"]},"metadata":{},"sourceType":"module"}