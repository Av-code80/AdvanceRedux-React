{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit'; //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n//29)for ath state, must create a new brand slice by changing name initialCounterState\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; //12) \n//19)to use our slice we need to use return value of calling createSlice by const counterSlice\n\nconst counterSlice = createSlice({\n  //17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',\n  //18)counter can be any name\n  initialState: initialCounterState,\n  //: initialState,  //initial state equal to our object --30)initialCounterState\n  reducers: {\n    //an object of all the reducers this slice needs\n    increment(state) {\n      //every method receive latest state automatically\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //here need a payload, extra data\n      state.counter = state.counter + action.payload; //it's mutating state-- 27+)Paylod replaced instead of amount\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  //31)then call createSlice to create another slice and it needs an object\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer //32)objet act as a map reducers\n\n  }\n}); //=>25)with this go to component where need actions: Counter.js\n\nexport const counterActions = counterSlice.actions; //24)to hold all identifiers can use action, it's an object and export it, \n\nexport const authActions = authSlice.actions; //33***)expose it as Action, now can use it in differents components,\n\nexport default store; //34)=> to Counter.js\n//* when having pieces of state which aren't directly related, can do an authentification status\n//and the counter status, can create different slices potentially also in different files\n//to make our code maintainable\n//**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n//*** store sate is changed now, so must fixe it in Counter.js => 34)\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n// return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n//     return state;\n// };","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAAiE;AACjE;AAEA;;AACA,MAAMC,mBAAmB,GAAI;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA7B,C,CAAkE;AAClE;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAAC;AAChCM,EAAAA,IAAI,EAAE,SADyB;AACc;AAC7CC,EAAAA,YAAY,EAAEL,mBAFiB;AAEO;AACtCM,EAAAA,QAAQ,EAAE;AAAiC;AACvCC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAAoB;AACnCA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHK;;AAINQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KANK;;AAONS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAiB;AAA0B;AACjDH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADuB,CAC0B;AAClD,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAZK;AAHqB,CAAD,CAAhC;AAmBA,MAAMY,gBAAgB,GAAG;AACvBC,EAAAA,eAAe,EAAE;AADM,CAAzB;AAIA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAAU;AACtCM,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,YAAY,EAAES,gBAFc;AAG5BR,EAAAA,QAAQ,EAAE;AACRW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B;AAaI,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAAE;AAC7BqB,EAAAA,OAAO,EAAE;AAAEnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OAAxB;AACTC,IAAAA,IAAI,EAAEL,SAAS,CAACI,OADP,CACqC;;AADrC;AADkB,CAAD,CAA5B,C,CAKgD;;AAChD,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC,C,CAA6C;;AACpD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B,C,CAA6C;;AACpD,eAAeJ,KAAf,C,CAAoD;AAMpD;AACA;AACA;AAEF;AAEA;AAQF;AACA;AACO;AACP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';  //16)toolkit-configureStore is more easier and useful than createSlice//22)\n//configureStore like createStore a store, merge multiple reducers in one\n\n//29)for ath state, must create a new brand slice by changing name initialCounterState\nconst initialCounterState  = { counter: 0, showCounter: true };   //12) \n//19)to use our slice we need to use return value of calling createSlice by const counterSlice\nconst counterSlice = createSlice({//17*)call it below initial object. with createSlice, we're preparing a slice of our global state\n  name: 'counter',                             //18)counter can be any name\n  initialState: initialCounterState,    //: initialState,  //initial state equal to our object --30)initialCounterState\n  reducers: {                                //an object of all the reducers this slice needs\n      increment(state) {                   //every method receive latest state automatically\n        state.counter++;\n      },                      \n      decrement(state) {\n        state.counter--;\n      },\n      increase(state, action)  {                         //here need a payload, extra data\n        state.counter = state.counter + action.payload;  //it's mutating state-- 27+)Paylod replaced instead of amount\n      },                       \n      toggleCounter(state) {\n        state.showCounter = !state.showCounter;\n      },\n  },\n}); \n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\nconst authSlice = createSlice({         //31)then call createSlice to create another slice and it needs an object\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n    const store = configureStore({ //21**) point toolkit content in createStore //23(configureStore), so how dispatch action ?\n      reducer: { counter: counterSlice.reducer, \n      auth: authSlice.reducer                       //32)objet act as a map reducers\n    },\n    });\n                                                    //=>25)with this go to component where need actions: Counter.js\n    export const counterActions = counterSlice.actions; //24)to hold all identifiers can use action, it's an object and export it, \n    export const authActions = authSlice.actions;       //33***)expose it as Action, now can use it in differents components,\n    export default store;                               //34)=> to Counter.js\n\n\n\n\n\n    //* when having pieces of state which aren't directly related, can do an authentification status\n    //and the counter status, can create different slices potentially also in different files\n    //to make our code maintainable\n\n  //**we can alternatively make a map of reducer and this map set as a value for main reducer or whatever we wanna\n\n  //*** store sate is changed now, so must fixe it in Counter.js => 34)\n\n\n\n\n\n  \n\n//     //20) const counterReducer = (state = initialState, action) => {\n//   //if (action.type === 'increment') {\n       // return {\n//             counter: state.counter + 1,   //our state, just an object with a counter property\n//             showCounter: state.showCounter  //13)we're returning overall state object; overall state object\n//           };\n//     }\n\n//     if (action.type === 'increase') {  //11)\n//         return {\n//           counter: state.counter + action.amount, //reducer is dynamic, it extract an action payload\n//           showCounter: state.showCounter\n//         };\n//       }\n\n//     if (action.type === 'decrement') {\n\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//           };\n//     }\n\n//     if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,      //13)change to oposit state => 14) counter.js\n//         counter: state.counter\n//       };\n//     }      \n\n//     return state;\n// };"]},"metadata":{},"sourceType":"module"}