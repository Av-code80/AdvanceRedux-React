{"ast":null,"code":"var _jsxFileName = \"/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux'; //4)need import data from redux store\n\nimport { counterActions } from '../store/index'; //25)import counterCtion here, { counterActions } is an object contain reducer names\n\nimport classes from './Counter.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const dispatch = useDispatch(); //8)import it up then take no argument but take a func from which dispatch an action against redux-store  \n\n  const counter = useSelector(state => state.counter.counter); //5*)get acces to data managed in store by useSelector\n\n  const show = useSelector(state => state.showCounter); //add\n\n  const incrementHandler = () => {\n    //9)So make 2func for dispatch new action\n    dispatch(counterActions.increment()); //must use exact identifier: 'increment' here\n  }; //26)then instead of ({ type: 'increment' }), put counterAction.increment(), bcz it's a method\n\n\n  const increaseHandler = () => {\n    dispatch(counterActions.increase(10)); //10)payload amount => 11) to index.js reducer\n  }; //27) for payload: instead of ({ type: 'increase', amount: 10 }); put...\n\n\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter()); //14)dispatch action of index.js\n  };\n\n  return (\n    /*#__PURE__*/\n    //6)to output useSelector at jsx\n    _jsxDEV(\"main\", {\n      className: classes.counter,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Redux Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this), show && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.value,\n        children: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: incrementHandler,\n          children: \"Increment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: increaseHandler,\n          children: \"Increase by 10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: decrementHandler,\n          children: \"Decrement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleCounterHandler,\n        children: \"Toggle Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this) //7)need 2buttons to dispatch action  //15) hide button by show &&... => 16) go index.js\n\n  );\n};\n\n_s(Counter, \"a6W6bcAuHVADZPU2xn93xNQZltc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Counter;\nexport default Counter; //* now need to pass function in it which ll be executed by react-redux &\n//dertermine which piece of data wanna extract from our store\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n//   toggleCounterHandler() {}\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n// const mapStateToProps = state => {\n//   return {\n//     counter: state.counter\n//   };\n// }\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     increment: () => dispatch({ type: 'increment' }),\n//     decrement: () => dispatch({ type: 'decrement' }),\n//   }\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/ReactRedux18/AvanceRedux-React/src/components/Counter.js"],"names":["useSelector","useDispatch","counterActions","classes","Counter","dispatch","counter","state","show","showCounter","incrementHandler","increment","increaseHandler","increase","decrementHandler","decrement","toggleCounterHandler","toggleCounter","value"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAAwD;;AAExD,SAASC,cAAT,QAA+B,gBAA/B,C,CAAoD;;AACpD,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CADoB,CACqB;;AACzC,QAAMK,OAAO,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcA,OAA1B,CAA3B,CAFoB,CAE2C;;AAC/D,QAAME,IAAI,GAAGR,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACE,WAAlB,CAAxB,CAHoB,CAGwC;;AAE5D,QAAMC,gBAAgB,GAAG,MAAM;AAAS;AACtCL,IAAAA,QAAQ,CAACH,cAAc,CAACS,SAAf,EAAD,CAAR,CAD6B,CACc;AAC5C,GAFD,CALoB,CAOiB;;;AAErC,QAAMC,eAAe,GAAG,MAAM;AAC5BP,IAAAA,QAAQ,CAACH,cAAc,CAACW,QAAf,CAAwB,EAAxB,CAAD,CAAR,CAD4B,CACa;AAC1C,GAFD,CAToB,CAW0B;;;AAC9C,QAAMC,gBAAgB,GAAG,MAAM;AAC7BT,IAAAA,QAAQ,CAACH,cAAc,CAACa,SAAf,EAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAG,MAAM;AACjCX,IAAAA,QAAQ,CAACH,cAAc,CAACe,aAAf,EAAD,CAAR,CADiC,CACe;AACjD,GAFD;;AAKA;AAAA;AAAqC;AACnC;AAAM,MAAA,SAAS,EAAEd,OAAO,CAACG,OAAzB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,IAAI,iBAAI;AAAK,QAAA,SAAS,EAAEL,OAAO,CAACe,KAAxB;AAAA,kBAAgCZ;AAAhC;AAAA;AAAA;AAAA;AAAA,cAFX,eAGE;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEI,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAEE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAEE,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE;AAAQ,QAAA,OAAO,EAAEE,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAUY;;AAVZ;AAYD,CAjCD;;GAAMZ,O;UACaH,W,EACDD,W,EACHA,W;;;KAHTI,O;AAmCN,eAAeA,OAAf,C,CAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { useSelector, useDispatch } from 'react-redux'; //4)need import data from redux store\n\nimport { counterActions } from '../store/index';    //25)import counterCtion here, { counterActions } is an object contain reducer names\nimport classes from './Counter.module.css';\n\nconst Counter = () => {\n  const dispatch = useDispatch();          //8)import it up then take no argument but take a func from which dispatch an action against redux-store  \n  const counter = useSelector((state) => state.counter.counter); //5*)get acces to data managed in store by useSelector\n  const show = useSelector((state) => state.showCounter);     //add\n\n  const incrementHandler = () => {        //9)So make 2func for dispatch new action\n    dispatch(counterActions.increment());      //must use exact identifier: 'increment' here\n  };                                   //26)then instead of ({ type: 'increment' }), put counterAction.increment(), bcz it's a method\n\n  const increaseHandler = () => {\n    dispatch(counterActions.increase(10));   //10)payload amount => 11) to index.js reducer\n  };                                            //27) for payload: instead of ({ type: 'increase', amount: 10 }); put...\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());       //14)dispatch action of index.js\n  };\n\n\n  return (                             //6)to output useSelector at jsx\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>} \n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 10</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>   //7)need 2buttons to dispatch action  //15) hide button by show &&... => 16) go index.js\n  );\n};\n\nexport default Counter;\n\n\n//* now need to pass function in it which ll be executed by react-redux &\n//dertermine which piece of data wanna extract from our store\n\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => {\n//   return {\n//     counter: state.counter\n//   };\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     increment: () => dispatch({ type: 'increment' }),\n//     decrement: () => dispatch({ type: 'decrement' }),\n//   }\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}